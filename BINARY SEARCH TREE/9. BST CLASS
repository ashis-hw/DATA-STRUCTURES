/*==========================================EXAMPLE=======================================================*/
 
                    


/*=============================================CODE=========================================================*/

public class BinarySearchTree {
    
    BinaryTreeNode<Integer> root;
	public void insert(int data) {
		//Implement the insert() function
        
        if(this.root==null){
            this.root=new BinaryTreeNode<>(data);
            return;
        }

        BinaryTreeNode<Integer> current=root;
        BinaryTreeNode<Integer> prev=null;
        while (current!=null){
            if(current.data>=data){
                prev=current;
                current=current.left;
            }else {
                prev=current;
                current=current.right;
            }
        }
        BinaryTreeNode<Integer> newNode = new BinaryTreeNode<>(data);
        if(prev.data>=data)
            prev.left=newNode;
        else
            prev.right=newNode;
	}
	
    private int findMin(BinaryTreeNode<Integer> root){

        if(root==null)
            return Integer.MAX_VALUE;

        int l1=findMin(root.left);
        int r1=findMin(root.right);
        return Math.min(root.data,Math.min(l1,r1));

    }
    
    private BinaryTreeNode<Integer> remove(BinaryTreeNode<Integer> root,int data){

        if(root==null)
            return null;

        if(root.data==data && root.left==null && root.right==null)
            return null;
        if(root.data==data && root.left!=null && root.right==null)
            return root.left;
        if(root.data==data && root.left==null && root.right!=null)
            return root.right;
        if(root.data==data && root.left!=null && root.right!=null){
            int min=findMin(root.right);
            root.data=min;
            root.right=remove(root.right,min);
            return root;
        }

        if(root.data>data){
            BinaryTreeNode<Integer> l1= remove(root.left,data);
            root.left=l1;
            return root;
        }

        BinaryTreeNode<Integer> r1=remove(root.right,data);
        root.right=r1;
        return root;
    }
    
	public void remove(int data) {
        this.root=remove(this.root,data);
	}
    
    private void printTree(BinaryTreeNode<Integer> root){

        if(root==null)
            return;

        String s=root.data+":";
        if(root.left!=null)
            s+="L:"+root.left.data+",";
        if(root.right!=null)
            s+="R:"+root.right.data;
        System.out.println(s);
        printTree(root.left);
        printTree(root.right);

    }
	
	public void printTree() {
		//Implement the printTree() function
        
        printTree(this.root);
	}
	
    private boolean search(BinaryTreeNode<Integer> root,int data){

        if(root==null)
            return false;

        if(root.data==data)
            return true;

        if(root.data>data)
            return search(root.left,data);
        else
            return search(root.right,data);
    }
    
	public boolean search(int data) {
		//Implement the search() function
        return search(this.root,data);
	}
	

}


/*=============================================DRYRUN=========================================================*/




