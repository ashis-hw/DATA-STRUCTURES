/*==========================================EXAMPLE=======================================================*/
 
                       1
                     /  \
                    2    3     
                   /    / \
                  4    5   6
                   \
                    7
               

OUTPUT: IF X = 7 THEN OUR OUTPUT WILL BE "TRUE"

Level 1:
The root node of the tree is 1

Level 2:
Left child of 1 = 2
Right child of 1 = 3

Level 3:
Left child of 2 = 4
Right child of 2 = null (-1)
Left child of 3 = 5
Right child of 3 = 6

Level 4:
Left child of 4 = null (-1)
Right child of 4 = 7
Left child of 5 = null (-1)
Right child of 5 = null (-1)
Left child of 6 = null (-1)
Right child of 6 = null (-1)

Level 5:
Left child of 7 = null (-1)
Right child of 7 = null (-1)

The first not-null node(of the previous level) is treated as the parent of the first two nodes of the current level. The second not-null node (of the previous level) is treated as the parent node for the next two nodes of the current level and so on.
The input ends when all nodes at the last level are null(-1).



/*=============================================CODE=========================================================*/

public class Solution {

	public static boolean isNodePresent(BinaryTreeNode<Integer> root, int x) {
	    //Your code goes here
		if (root == null)
			return false;
		if (root.data == x)
			return true;

		return isNodePresent(root.left, x) || isNodePresent(root.right, x);
	}

 }
}

/*=============================================DRYRUN=========================================================*/


