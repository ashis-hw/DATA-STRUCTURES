/*==========================================EXAMPLE=======================================================*/
 
                    


/*=============================================CODE=========================================================*/

import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;

public class Solution {
	public static ArrayList<Integer> longestConsecutiveIncreasingSequence(int[] arr) {
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
        
        if(arr.length==0){
            ArrayList<Integer> l1 = new ArrayList<>();
            l1.add(0);
            return l1;
        }
        
        HashMap<Integer,Boolean> map=new HashMap<>();
        for(int i:arr){
            map.put(i,true);
        }
        int s=-1;
        int start=arr[0];
        int max=Integer.MIN_VALUE;
        
        for(int i:arr){
            if(map.get(i)){
                map.put(i,false);
                int j=i+1;
                int c=0;
                while(true){
                    if(map.containsKey(j)){
                        map.put(j,false);
                        c++;
                        j=j+1;
                    }else
                        break;
                }
                int k=i-1;
                while(true){
                    if(map.containsKey(k)){
                        map.put(k,false);
                        c++;
                        k=k-1;
                    }else
                        break;
                }
                c=c+1;
                if(c==max){
                    if(start!=s){
                        start=k+1;
                        s=i;
                        max=c;
                    }
                }else if(c>max){
                    start=k+1;
                    s=i;
                    max=c;
                }
            }
        }
        
        ArrayList<Integer> l1=new ArrayList<>();
        l1.add(start);
        l1.add(start+max-1);
        return l1;
    }
}




/*=============================================DRYRUN=========================================================*/



