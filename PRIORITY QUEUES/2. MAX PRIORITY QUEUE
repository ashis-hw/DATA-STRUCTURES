/*==========================================EXAMPLE=======================================================*/
 
                    


/*=============================================CODE=========================================================*/

import java.util.*;

public class PQ {
	// Complete this class

	ArrayList<Integer> heap;

	PQ() {
		heap = new ArrayList<>();
	}

	boolean isEmpty() {
		// Implement the isEmpty() function here
		return this.heap.size() == 0;
	}

	int getSize() {
		// Implement the getSize() function here
		return this.heap.size();
	}

	int getMax() {
		// Implement the getMax() function here
		if (isEmpty()) {
			return Integer.MIN_VALUE;
		}
		return this.heap.get(0);
	}

	void insert(int element) {
		// Implement the insert() function here
		heap.add(element);
		int ci = getSize() - 1;
		int pi = (ci - 1) / 2;
		while (ci > 0) {
			if (heap.get(ci) > heap.get(pi)) {
				int temp = heap.get(pi);
				heap.set(pi, heap.get(ci));
				heap.set(ci, temp);
				ci = pi;
				pi = (ci - 1) / 2;
			} else
				return;
		}
	}

	int removeMax() {
		// Implement the removeMax() function here
		if (isEmpty()) {
			return Integer.MIN_VALUE;
		}

		int e1 = heap.get(0);
		heap.set(0, heap.get(getSize() - 1));
		heap.remove(getSize() - 1);
		// Down Heapify
		int i = 0;
		int lc = 1;
		int rc = 2;
		while (i <= getSize()) {
			lc = 2 * i + 1;
			rc = 2 * i + 2;
			if (lc < getSize() && rc < getSize()) {
				int lv = heap.get(lc);
				int rv = heap.get(rc);
				if (lv > heap.get(i) && lv >= rv) {
					heap.set(lc, heap.get(i));
					heap.set(i, lv);
					i = lc;
				} else if (rv > heap.get(i) && rv > lv) {
					heap.set(rc, heap.get(i));
					heap.set(i, rv);
					i = rc;
				} else {
					break;
				}
			} else if (lc < getSize()) {
				if (heap.get(lc) > heap.get(i)) {
					int t = heap.get(i);
					heap.set(i, heap.get(lc));
					heap.set(lc, t);
					i = lc;
				} else {
					break;
				}
			} else {
				break;
			}
		}
		return e1;
	}
}




/*=============================================DRYRUN=========================================================*/



