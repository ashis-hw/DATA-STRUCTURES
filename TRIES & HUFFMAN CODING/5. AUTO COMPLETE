/*==========================================EXAMPLE=======================================================*/
 
                    


/*=============================================CODE=========================================================*/

import java.util.ArrayList;

class TrieNode{
	char data;
	boolean isTerminating;
	TrieNode children[];
	int childCount;

	public TrieNode(char data) {
		this.data = data;
		isTerminating = false;
		children = new TrieNode[26];
		childCount = 0;
	}
}

public class Trie {
	private TrieNode root;
	public int count;
	public Trie() {
		root = new TrieNode('\0');
	}

	private void add(TrieNode root, String word){
		if(word.length() == 0){
			root.isTerminating = true;
			return;
		}		
		int childIndex = word.charAt(0) - 'a';
		TrieNode child = root.children[childIndex];
		if(child == null){
			child = new TrieNode(word.charAt(0));
			root.children[childIndex] = child;
			root.childCount++;
		}
		add(child, word.substring(1));
	}

	public void add(String word){
		add(root, word);
	}
	
	
	public void autoComplete(ArrayList<String> input, String word) {

        // Write your code here

        for(String s:input)
            this.add(s);
        this.autoComplete(this.root,"",word);
    }
    
    public void autoComplete(TrieNode root,String p,String up){

        if(up.isEmpty()){
            if(root.isTerminating){
                System.out.println(p);
            }
            if(root.childCount!=0){
                for (int i = 0; i < 26; i++) {
                    if(root.children[i]!=null)
                        autoComplete(root.children[i],p+root.children[i].data,up);
                }
            }
            return;
        }

        int index=up.charAt(0)-'a';
        TrieNode child=root.children[index];
        if(child==null)
            return;
        autoComplete(child,p+child.data,up.substring(1));
    }

}



/*=============================================DRYRUN=========================================================*/



